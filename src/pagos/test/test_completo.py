"""
Test completo del microservicio de notificaciones
Incluye servicios de aplicaci√≥n, CQRS, eventos, etc.
"""

import asyncio
import sys
import os

# Agregar el directorio actual al path para importaciones
sys.path.insert(0, os.path.dirname(__file__))

async def test_completo():
    """Test completo de funcionalidad del microservicio"""
    print("üöÄ INICIANDO TEST COMPLETO DEL MICROSERVICIO DE NOTIFICACIONES")
    print("=" * 80)
    
    try:
        # Importar todos los componentes
        print("üì¶ Importando componentes del microservicio...")
        
        from modulos.aplicacion.servicios import ServicioAplicacionNotificaciones
        from modulos.aplicacion.dto import CrearNotificacionDTO
        from modulos.infraestructura.repositorios import RepositorioNotificacionesMemoria
        from modulos.infraestructura.despachadores import DespachadorEventos
        from modulos.dominio.fabricas import FabricaNotificaciones
        
        print("   ‚úÖ Todos los componentes importados correctamente")
        
        # Configurar infraestructura
        print("\nüèóÔ∏è Configurando infraestructura...")
        repositorio = RepositorioNotificacionesMemoria()
        despachador = DespachadorEventos()
        servicio = ServicioAplicacionNotificaciones(repositorio, despachador)
        
        # Intentar inicializar despachador (sin fallar si no hay Pulsar)
        try:
            await despachador.inicializar()
            print("   ‚úÖ Despachador de eventos inicializado")
        except Exception as e:
            print(f"   ‚ö†Ô∏è Despachador sin Pulsar: {e}")
        
        print("   ‚úÖ Infraestructura configurada")
        
        # Test 1: Crear notificaci√≥n usando servicio de aplicaci√≥n
        print("\nüìß Test 1: Crear notificaci√≥n usando servicio...")
        dto_email = CrearNotificacionDTO(
            id_usuario="user-001",
            tipo="bienvenida",
            canal="email",
            destinatario="test@example.com",
            titulo="¬°Bienvenido!",
            mensaje="¬°Gracias por registrarte en AlpesPartners!",
            datos_adicionales={"plantilla": "bienvenida", "idioma": "es"}
        )
        
        notif_result = await servicio.crear_notificacion(dto_email)
        print(f"   ‚úÖ Notificaci√≥n creada: {notif_result.id_notificacion}")
        print(f"   üìß Email: {notif_result.destinatario}")
        print(f"   üìù T√≠tulo: {notif_result.titulo}")
        
        # Test 2: Crear notificaci√≥n SMS
        print("\nüì± Test 2: Crear notificaci√≥n SMS...")
        dto_sms = CrearNotificacionDTO(
            id_usuario="user-002",
            tipo="transaccional",
            canal="sms",
            destinatario="+1234567890",
            titulo="C√≥digo de verificaci√≥n",
            mensaje="Su c√≥digo es: 123456",
            datos_adicionales={"codigo": "123456", "expira": "5min"}
        )
        
        sms_result = await servicio.crear_notificacion(dto_sms)
        print(f"   ‚úÖ SMS creado: {sms_result.id_notificacion}")
        print(f"   üì± Tel√©fono: {sms_result.destinatario}")
        
        # Test 3: Crear notificaci√≥n push promocional
        print("\nüîî Test 3: Crear notificaci√≥n push promocional...")
        dto_push = CrearNotificacionDTO(
            id_usuario="user-003",
            tipo="promocional",
            canal="push",
            destinatario="device-token-xyz123",
            titulo="¬°Oferta especial!",
            mensaje="20% de descuento en tu pr√≥xima compra",
            datos_adicionales={"descuento": 20, "categoria": "ropa"}
        )
        
        push_result = await servicio.crear_notificacion(dto_push)
        print(f"   ‚úÖ Push creada: {push_result.id_notificacion}")
        print(f"   üîî Token: {push_result.destinatario}")
        
        # Test 4: Obtener notificaci√≥n por ID
        print("\nüîç Test 4: Obtener notificaci√≥n por ID...")
        obtenida = await servicio.obtener_notificacion(notif_result.id_notificacion)
        if obtenida:
            print(f"   ‚úÖ Notificaci√≥n encontrada: {obtenida.titulo}")
            print(f"   üìä Estado: {obtenida.estado}")
        else:
            print("   ‚ùå No se encontr√≥ la notificaci√≥n")
        
        # Test 5: Obtener notificaciones por usuario
        print("\nüë§ Test 5: Obtener notificaciones por usuario...")
        del_usuario = await servicio.obtener_notificaciones_usuario("user-001")
        print(f"   ‚úÖ Notificaciones encontradas: {len(del_usuario.notificaciones)}")
        for item in del_usuario.notificaciones:
            print(f"   üìù {item.titulo} - {item.estado}")
        
        # Test 6: Enviar notificaci√≥n
        print("\nüì§ Test 6: Enviar notificaci√≥n...")
        enviada = await servicio.enviar_notificacion(notif_result.id_notificacion)
        print(f"   ‚úÖ Notificaci√≥n enviada: {enviada.id_notificacion}")
        print(f"   üìä Nuevo estado: {enviada.estado}")
        print(f"   ‚è∞ Fecha env√≠o: {enviada.fecha_envio}")
        
        # Test 7: Marcar notificaci√≥n como fallida
        print("\n‚ùå Test 7: Marcar notificaci√≥n como fallida...")
        fallida = await servicio.marcar_notificacion_fallida(
            sms_result.id_notificacion,
            "N√∫mero telef√≥nico inv√°lido"
        )
        print(f"   ‚úÖ Notificaci√≥n marcada como fallida: {fallida.id_notificacion}")
        print(f"   üìä Estado: {fallida.estado}")
        print(f"   ‚ùå Error: {fallida.detalle_error}")
        
        # Test 8: Obtener notificaciones pendientes
        print("\n‚è≥ Test 8: Obtener notificaciones pendientes...")
        pendientes = await servicio.obtener_notificaciones_pendientes()
        print(f"   ‚úÖ Notificaciones pendientes: {len(pendientes)}")
        for pend in pendientes:
            print(f"   üìù {pend.titulo} - {pend.canal}")
        
        # Test 9: Estad√≠sticas completas
        print("\nüìä Test 9: Obtener estad√≠sticas...")
        stats = await servicio.obtener_estadisticas()
        print(f"   ‚úÖ Total notificaciones: {stats.total_notificaciones}")
        print(f"   üìß Por canal:")
        for canal, count in stats.por_canal.items():
            print(f"      {canal}: {count}")
        print(f"   üìä Por estado:")
        # Construir por_estado desde los campos individuales
        por_estado = {
            "pendiente": stats.pendientes,
            "enviada": stats.enviadas,
            "fallida": stats.fallidas,
            "cancelada": stats.canceladas
        }
        for estado, count in por_estado.items():
            if count > 0:  # Solo mostrar estados con notificaciones
                print(f"      {estado}: {count}")
        print(f"   üìã Por tipo:")
        for tipo, count in stats.por_tipo.items():
            print(f"      {tipo}: {count}")
        
        # Test 10: Procesar notificaciones pendientes
        print("\nüîÑ Test 10: Procesar notificaciones pendientes...")
        procesadas = await servicio.procesar_notificaciones_pendientes()
        print(f"   ‚úÖ Notificaciones procesadas: {procesadas}")
        
        # Estad√≠sticas finales
        print("\nüìä ESTAD√çSTICAS FINALES:")
        stats_finales = await servicio.obtener_estadisticas()
        print(f"   üìß Total: {stats_finales.total_notificaciones}")
        print(f"   ‚úÖ Enviadas: {stats_finales.enviadas}")
        print(f"   ‚ùå Fallidas: {stats_finales.fallidas}")
        print(f"   ‚è≥ Pendientes: {stats_finales.pendientes}")
        
        # Test 11: Usar f√°bricas especializadas
        print("\nüè≠ Test 11: Usar f√°bricas especializadas...")
        
        # Crear usando f√°brica directamente
        notif_bienvenida = FabricaNotificaciones.crear_email_bienvenida(
            "user-999",
            "nuevo@test.com",
            "Usuario Nuevo"
        )
        await repositorio.agregar(notif_bienvenida)
        print(f"   ‚úÖ Email de bienvenida: {notif_bienvenida.id_notificacion}")
        
        notif_codigo = FabricaNotificaciones.crear_sms_codigo_verificacion(
            "user-888",
            "+9876543210",
            "654321"
        )
        await repositorio.agregar(notif_codigo)
        print(f"   ‚úÖ SMS de c√≥digo: {notif_codigo.id_notificacion}")
        
        notif_promo = FabricaNotificaciones.crear_push_promocion(
            "user-777",
            "token-device-abc",
            "Promoci√≥n Flash",
            30
        )
        await repositorio.agregar(notif_promo)
        print(f"   ‚úÖ Push promocional: {notif_promo.id_notificacion}")
        
    except Exception as e:
        print(f"\n‚ùå ERROR DURANTE EL TEST: {e}")
        import traceback
        traceback.print_exc()
        return False
    
    finally:
        # Limpiar recursos
        try:
            await despachador.cerrar()
        except:
            pass
    
    print("\n" + "=" * 80)
    print("‚úÖ TEST COMPLETO FINALIZADO EXITOSAMENTE")
    print("üéØ RESUMEN:")
    print("   ‚Ä¢ ‚úÖ Servicios de aplicaci√≥n funcionando")
    print("   ‚Ä¢ ‚úÖ CQRS implementado (comandos y consultas)")
    print("   ‚Ä¢ ‚úÖ DTOs y mapeadores operativos") 
    print("   ‚Ä¢ ‚úÖ Repositorio as√≠ncrono funcional")
    print("   ‚Ä¢ ‚úÖ Eventos de dominio generados")
    print("   ‚Ä¢ ‚úÖ F√°bricas especializadas funcionando")
    print("   ‚Ä¢ ‚úÖ Gesti√≥n de estados completa")
    print("   ‚Ä¢ ‚úÖ Estad√≠sticas detalladas")
    print("   ‚Ä¢ ‚úÖ Arquitectura DDD/CQRS/Event-Driven validada")
    print("=" * 80)
    return True


if __name__ == "__main__":
    resultado = asyncio.run(test_completo())
    exit(0 if resultado else 1)
